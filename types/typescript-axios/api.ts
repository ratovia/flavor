/* tslint:disable */
/* eslint-disable */
/**
 * wine
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetWineWineId200Response
 */
export interface GetWineWineId200Response {
    /**
     * 
     * @type {Wine}
     * @memberof GetWineWineId200Response
     */
    'wine'?: Wine;
}
/**
 * 
 * @export
 * @interface GetWines200Response
 */
export interface GetWines200Response {
    /**
     * 
     * @type {Array<Wine>}
     * @memberof GetWines200Response
     */
    'wines'?: Array<Wine>;
}
/**
 * 
 * @export
 * @interface Varietal
 */
export interface Varietal {
    /**
     * 
     * @type {string}
     * @memberof Varietal
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Varietal
     */
    'name'?: string;
}
/**
 * ワイン
 * @export
 * @interface Wine
 */
export interface Wine {
    /**
     * 
     * @type {string}
     * @memberof Wine
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wine
     */
    'brand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wine
     */
    'year'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wine
     */
    'price'?: string;
    /**
     * 
     * @type {string}
     * @memberof Wine
     */
    'producer_name'?: string;
    /**
     * 
     * @type {Array<Varietal>}
     * @memberof Wine
     */
    'varietals'?: Array<Varietal>;
}

/**
 * WineApi - axios parameter creator
 * @export
 */
export const WineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ワインの情報を取得
         * @param {number} wineId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWineWineId: async (wineId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wineId' is not null or undefined
            assertParamExists('getWineWineId', 'wineId', wineId)
            const localVarPath = `/wine/{wine_id}`
                .replace(`{${"wine_id"}}`, encodeURIComponent(String(wineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary wineの一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWines: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WineApi - functional programming interface
 * @export
 */
export const WineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ワインの情報を取得
         * @param {number} wineId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWineWineId(wineId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWineWineId200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWineWineId(wineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary wineの一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWines(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetWines200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWines(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WineApi - factory interface
 * @export
 */
export const WineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WineApiFp(configuration)
    return {
        /**
         * 
         * @summary ワインの情報を取得
         * @param {number} wineId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWineWineId(wineId: number, options?: any): AxiosPromise<GetWineWineId200Response> {
            return localVarFp.getWineWineId(wineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary wineの一覧
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWines(options?: any): AxiosPromise<GetWines200Response> {
            return localVarFp.getWines(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WineApi - object-oriented interface
 * @export
 * @class WineApi
 * @extends {BaseAPI}
 */
export class WineApi extends BaseAPI {
    /**
     * 
     * @summary ワインの情報を取得
     * @param {number} wineId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WineApi
     */
    public getWineWineId(wineId: number, options?: AxiosRequestConfig) {
        return WineApiFp(this.configuration).getWineWineId(wineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary wineの一覧
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WineApi
     */
    public getWines(options?: AxiosRequestConfig) {
        return WineApiFp(this.configuration).getWines(options).then((request) => request(this.axios, this.basePath));
    }
}


